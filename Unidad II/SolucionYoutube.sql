-- 1. Crear una consulta que muestre la información de los usuarios con toda su información de forma legible
-- (es decir en vez de códigos mostrar su valor, omitir el campo codigo_municipio), mostrar el nombre
-- completo y las fechas en formato DD*NOMBRE_MES*AÑO. Para los lugares mostrar el primer y segundo
-- nivel (ejemplo: municipio y departamento). Utilizar producto cartesiano con el operador (+).
SELECT A.CODIGO_USUARIO,
    B.NOMBRE_LUGAR AS MUNICIPIO,
    C.NOMBRE_LUGAR AS DEPARTAMENTO,
    D.TIPO_USUARIO,
    E.ESTADO_USUARIO,
    A.NOMBRE || ' ' || A.APELLIDO AS NOMBRE_COMPLETO,
    A.USUARIO,
    A.CORREO_ELECTRONICO,
    A.PASSWORD,
    A.FOTOGRAFIA,
    A.SEXO,
    TO_CHAR(A.FECHA_NACIMIENTO, 'DD*FMMONTH*YYYY') AS FECHA_NACIMIENTO,
    TO_CHAR(A.FECHA_REGISTRO, 'DD*FMMONTH*YYYY') AS FECHA_REGISTRO,
    A.TELEFONO
FROM TBL_USUARIOS A,
     TBL_LUGARES B,
     TBL_LUGARES C,
     TBL_TIPOS_USUARIOS D,
     TBL_ESTADOS_USUARIOS E
WHERE   A.CODIGO_LUGAR = B.CODIGO_LUGAR(+)
AND     B.CODIGO_LUGAR_PADRE = C.CODIGO_LUGAR(+)
AND     A.CODIGO_TIPO_USUARIO = D.CODIGO_TIPO_USUARIO(+)
AND    A.CODIGO_ESTADO_USUARIO = E.CODIGO_ESTADO_USUARIO(+);

SELECT *
FROM TBL_LUGARES;


-- 2. Mostrar el video que más y menos veces ha sido compartido. Mostrar los datos del video, cantidad de
-- shares y cantidad de usuarios diferentes (distinct) que lo han compartido.

WITH COMPARTIDOS AS (
    SELECT CODIGO_VIDEO, COUNT(*) CANTIDAD_COMPARTIDOS
    FROM TBL_SHARES
    GROUP BY CODIGO_VIDEO
    ORDER BY 2
) 
SELECT 'MAS VECES COMPARTIDO' AS TIPO, A.CODIGO_VIDEO, B.NOMBRE_VIDEO, A.CANTIDAD_COMPARTIDOS
FROM COMPARTIDOS A
INNER JOIN TBL_VIDEOS B
ON A.CODIGO_VIDEO = B.CODIGO_VIDEO
WHERE CANTIDAD_COMPARTIDOS = (SELECT MAX(CANTIDAD_COMPARTIDOS) FROM COMPARTIDOS)

UNION ALL 

SELECT 'MENOS VECES COMPARTIDO' AS TIPO, A.CODIGO_VIDEO, B.NOMBRE_VIDEO, A.CANTIDAD_COMPARTIDOS
FROM COMPARTIDOS A
INNER JOIN TBL_VIDEOS B
ON A.CODIGO_VIDEO = B.CODIGO_VIDEO
WHERE CANTIDAD_COMPARTIDOS = (SELECT MIN(CANTIDAD_COMPARTIDOS) FROM COMPARTIDOS);

-- 3. Mostrar todos los usuarios que no tienen ninguna lista de reproducción.
SELECT A.CODIGO_USUARIO,
        A.NOMBRE || ' ' || A.APELLIDO AS NOMBRE_COMPLETO,
        A.USUARIO,
        A.CORREO_ELECTRONICO,
        A.SEXO,
        A.FECHA_NACIMIENTO,
        A.FECHA_REGISTRO,
        A.TELEFONO,
        C.NOMBRE_LUGAR,
        D.TIPO_USUARIO
FROM TBL_USUARIOS A
LEFT JOIN TBL_LISTAS_REPRODUCCION B
ON A.CODIGO_USUARIO = B.CODIGO_USUARIO
LEFT JOIN TBL_LUGARES C
ON A.CODIGO_LUGAR = C.CODIGO_LUGAR
LEFT JOIN TBL_TIPOS_USUARIOS D
ON A.CODIGO_TIPO_USUARIO = D.CODIGO_TIPO_USUARIO
WHERE B.CODIGO_LISTA_REPRODUCCION IS NULL;

SELECT *
FROM TBL_LISTAS_REPRODUCCION;


-- 4. Mostrar todos los videos que tienen un canal, 
--los que no tienen un canal y los canales que no tienen
-- videos.
SELECT A.CODIGO_VIDEO,
        A.NOMBRE_VIDEO,
        B.NOMBRE_CANAL,
        C.NOMBRE || ' ' || C.APELLIDO AS NOMBRE_COMPLETO,
        C.USUARIO,
        D.NOMBRE_ESTADO_VIDEO,
        E.NOMBRE_IDIOMA
FROM TBL_VIDEOS A
FULL OUTER JOIN TBL_CANALES B
ON A.CODIGO_CANAL = B.CODIGO_CANAL
LEFT JOIN TBL_USUARIOS C
ON A.CODIGO_USUARIO = C.CODIGO_USUARIO
LEFT JOIN TBL_ESTADOS_VIDEOS D
ON A.CODIGO_ESTADO_VIDEO = D.CODIGO_ESTADO_VIDEO
LEFT JOIN TBL_IDIOMAS E
ON A.CODIGO_IDIOMA = E.CODIGO_IDIOMA
;



-- 5. Mostrar el histórico mensual de pagos a usuarios con el siguiente detalle:
-- a. Año-Mes
-- b. Monto total
-- c. Total Impuestos
-- d. Total Descuentos
-- e. Total neto
-- f. Cantidad de usuarios distintos
-- g. Cantidad de videos distintos

SELECT 
    TO_CHAR(A.FECHA_TRANSACCION, 'YYYY-MM') AS ANIO_MES,
    SUM(A.MONTO_PAGO) AS MONTO_TOTAL,
    SUM(A.IMPUESTOS) AS TOTAL_IMPUESTOS,
    SUM(A.DESCUENTOS) AS TOTAL_DESCUENTOS,
    SUM(A.MONTO_PAGO + A.IMPUESTOS - A.DESCUENTOS) AS TOTAL_NETO,
    COUNT(DISTINCT A.CODIGO_USUARIO) AS CANTIDAD_USUARIOS_DISTINTOS,
    COUNT(DISTINCT A.CODIGO_VIDEO) AS CANTIDAD_VIDEOS_DISTINTOS
FROM TBL_TRANSACCIONES_PAGOS A
GROUP BY TO_CHAR(A.FECHA_TRANSACCION, 'YYYY-MM');




-- 6. Mostrar los videos con la siguiente información:
-- a. Nombre Video
-- b. Resolución
-- c. Nombre completo del usuario
-- d. Nombre de usuario
-- e. Estado del video
-- f. Idioma
-- g. Canal al que pertenece
-- h. Duración en minutos
-- i. Fecha de subida en formato DD#MM#YYYY Horas:Minutos:Segundos
-- j. URL
-- k. Cantidad de Likes (no usar el campo CANTIDAD_LIKES obtenerlo de la tabla de likes)
-- l. Cantidad de Dislikes (no usar el campo CANTIDAD_DISLIKES obtenerlo de la tabla de likes)
-- m. Cantidad de visualizaciones (no usar el campo CANTIDAD_VISUALIZACIONES utilizar la tabla de
-- historial)
-- n. Cantidad de Shares (no usar el campo CANTIDAD_SHARES utilizar la tabla de shares)
-- o. Cantidad de listas en las que ha sido incluido.

CREATE MATERIALIZED VIEW MVW_VIDEOS AS
WITH LIKES AS (
    SELECT CODIGO_VIDEO,
         COUNT(*) CANTIDAD_LIKES
    FROM TBL_LIKES
    WHERE CODIGO_TIPO_LIKE = 1
    GROUP BY CODIGO_VIDEO
),
DISLIKES AS (
    SELECT CODIGO_VIDEO,
         COUNT(*) CANTIDAD_DISLIKES
    FROM TBL_LIKES
    WHERE CODIGO_TIPO_LIKE = 2
    GROUP BY CODIGO_VIDEO
),
HISTORIAL AS (
    SELECT CODIGO_VIDEO,
         COUNT(*) CANTIDAD_VISUALIZACIONES
    FROM TBL_HISTORIAL_VIDEOS
    GROUP BY CODIGO_VIDEO
),
SHARES AS (
    SELECT CODIGO_VIDEO,
         COUNT(*) CANTIDAD_SHARES
    FROM TBL_SHARES
    GROUP BY CODIGO_VIDEO
),
LISTAS AS (
    SELECT CODIGO_VIDEO,
         COUNT(DISTINCT CODIGO_LISTA_REPRODUCCION) CANTIDAD_LISTAS
    FROM TBL_VIDEOS_X_LISTA
    GROUP BY CODIGO_VIDEO
)
SELECT A.NOMBRE_VIDEO,
       A.RESOLUCION,
       B.NOMBRE || ' ' || B.APELLIDO AS NOMBRE_COMPLETO,
       B.USUARIO,
       C.NOMBRE_ESTADO_VIDEO,
       D.NOMBRE_IDIOMA,
       E.NOMBRE_CANAL,
       A.DURACION_SEGUNDOS / 60 AS DURACION_MINUTOS,
       TO_CHAR(A.FECHA_SUBIDA, 'DD#MM#YYYY HH24:MI:SS') AS FECHA_SUBIDA,
       A.URL,
       NVL(F.CANTIDAD_LIKES, 0) AS CANTIDAD_LIKES,
       NVL(G.CANTIDAD_DISLIKES, 0) AS CANTIDAD_DISLIKES,
       NVL(H.CANTIDAD_VISUALIZACIONES,0) AS CANTIDAD_VISUALIZACIONES,
       NVL(I.CANTIDAD_SHARES,0) AS CANTIDAD_SHARES,
       NVL(J.CANTIDAD_LISTAS,0) AS CANTIDAD_LISTAS
FROM TBL_VIDEOS A
LEFT JOIN TBL_USUARIOS B
ON A.CODIGO_USUARIO = B.CODIGO_USUARIO
LEFT JOIN TBL_ESTADOS_VIDEOS C
ON A.CODIGO_ESTADO_VIDEO = C.CODIGO_ESTADO_VIDEO
LEFT JOIN TBL_IDIOMAS D
ON A.CODIGO_IDIOMA = D.CODIGO_IDIOMA
LEFT JOIN TBL_CANALES E
ON A.CODIGO_CANAL = E.CODIGO_CANAL
LEFT JOIN LIKES F
ON A.CODIGO_VIDEO = F.CODIGO_VIDEO
LEFT JOIN DISLIKES G
ON A.CODIGO_VIDEO = G.CODIGO_VIDEO
LEFT JOIN HISTORIAL H
ON A.CODIGO_VIDEO = H.CODIGO_VIDEO
LEFT JOIN SHARES I
ON A.CODIGO_VIDEO = I.CODIGO_VIDEO
LEFT JOIN LISTAS J
ON A.CODIGO_VIDEO = J.CODIGO_VIDEO;

SELECT *
FROM MVW_VIDEOS;

BEGIN
    DBMS_MVIEW.REFRESH ('MVW_VIDEOS');
END;

SELECT *
FROM TBL_VIDEOS A;

SELECT CODIGO_VIDEO,
         COUNT(*) CANTIDAD_LIKES
FROM TBL_LIKES
WHERE CODIGO_TIPO_LIKE = 1
GROUP BY CODIGO_VIDEO;

SELECT *
FROM TBL_TIPOS_LIKES;



-- 7. Crear una vista materializada de la consulta del inciso anterior, deje planteada la instrucción para
-- actualizar una vista materializada.









CREATE TABLE STARTUPS (
    NAME VARCHAR2(100)
);
TRUNCATE TABLE STARTUPS;
INSERT INTO STARTUPS (NAME) VALUES ('Vero');
INSERT INTO STARTUPS (NAME) VALUES ('Gear go');
-- INSERT INTO STARTUPS (NAME) VALUES ('Inmedic');
INSERT INTO STARTUPS (NAME) VALUES ('Movu');
INSERT INTO STARTUPS (NAME) VALUES ('Fend');
INSERT INTO STARTUPS (NAME) VALUES ('U-Mandaditos');



SELECT DBMS_RANDOM.VALUE() RANDOM, NAME 
FROM STARTUPS
ORDER BY 1;

JUEVES 10, 4PM-7PM
VIERNES 11, 10AM-12PM (SALON DEL CRA)





