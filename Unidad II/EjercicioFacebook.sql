-- 1. Consultar la cantidad de likes por publicación.
SELECT * FROM TBL_PUBLICACIONES;


SELECT  B.CONTENIDO_PUBLICACION, 
        COUNT(*) AS CANTIDAD_LIKES
FROM TBL_LIKE_PUBLICACIONES A
INNER JOIN TBL_PUBLICACIONES B
ON (A.CODIGO_PUBLICACION = B.CODIGO_PUBLICACION)
GROUP BY B.CONTENIDO_PUBLICACION;


-- 2. Consultar la cantidad de likes por fotografía.
SELECT A.CODIGO_FOTO, B.DESCRIPCION_FOTO, 
        COUNT(*) AS CANTIDAD_LIKES
 FROM TBL_LIKE_FOTOGRAFIAS A
 INNER JOIN TBL_FOTOS B
 ON (A.CODIGO_FOTO = B.CODIGO_FOTO)
 GROUP BY A.CODIGO_FOTO, B.DESCRIPCION_FOTO;


SELECT * FROM TBL_FOTOS;

-- 3. Consultar los grupos en los cuales la cantidad de usuarios 
-- sea mayor que 5, mostrar el nombre
-- del grupo y la cantidad de usuarios.

SELECT * FROM TBL_GRUPOS;

--UTILIZANDO HAVING
SELECT  A.CODIGO_GRUPO, 
        B.NOMBRE_GRUPO,
        COUNT(*) AS CANTIDAD_USUARIOS 
FROM TBL_GRUPOS_X_USUARIO A
INNER JOIN TBL_GRUPOS B
ON (A.CODIGO_GRUPO = B.CODIGO_GRUPO)
GROUP BY A.CODIGO_GRUPO, B.NOMBRE_GRUPO
HAVING COUNT(*) > 5;

-- UTILIZANDO SUBCONSULTAS
SELECT *
FROM (
    SELECT  A.CODIGO_GRUPO, 
            B.NOMBRE_GRUPO,
            COUNT(*) AS CANTIDAD_USUARIOS 
    FROM TBL_GRUPOS_X_USUARIO A
    INNER JOIN TBL_GRUPOS B
    ON (A.CODIGO_GRUPO = B.CODIGO_GRUPO)
    GROUP BY A.CODIGO_GRUPO, B.NOMBRE_GRUPO
)
WHERE CANTIDAD_USUARIOS > 5;


-- 4. Mostrar la cantidad de amistades pendientes y rechazadas.
SELECT B.NOMBRE_ESTATUS, COUNT(*) CANTIDAD_SOLICITUDES
FROM TBL_AMIGOS A
INNER JOIN TBL_ESTATUS_SOLICITUDES B
ON (A.CODIGO_ESTATUS = B.CODIGO_ESTATUS)
WHERE A.CODIGO_ESTATUS IN (2,3)
GROUP BY B.NOMBRE_ESTATUS;

SELECT * FROM TBL_ESTATUS_SOLICITUDES;

-- 5. Mostrar el usuario con mayor cantidad de amigos confirmados (El más cool).
SELECT A.CODIGO_USUARIO, B.NOMBRE_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS 
FROM TBL_AMIGOS A
INNER JOIN TBL_USUARIOS B
ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
WHERE A.CODIGO_ESTATUS = 1
GROUP BY A.CODIGO_USUARIO, B.NOMBRE_USUARIO
HAVING COUNT(*) = (
    SELECT MAX(CANTIDAD_AMIGOS_CONFIRMADOS) 
    FROM ( 
        SELECT A.CODIGO_USUARIO, B.NOMBRE_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS 
        FROM TBL_AMIGOS A
        INNER JOIN TBL_USUARIOS B
        ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
        WHERE A.CODIGO_ESTATUS = 1
        GROUP BY A.CODIGO_USUARIO, B.NOMBRE_USUARIO 
    )
);


---MAS ORDENADA
WITH AMIGOS_CONFIRMADOS AS (
    SELECT A.CODIGO_USUARIO, B.NOMBRE_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS 
    FROM TBL_AMIGOS A
    INNER JOIN TBL_USUARIOS B
    ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
    WHERE A.CODIGO_ESTATUS = 1
    GROUP BY A.CODIGO_USUARIO, B.NOMBRE_USUARIO
)
SELECT * 
FROM AMIGOS_CONFIRMADOS
WHERE CANTIDAD_AMIGOS_CONFIRMADOS = (
    SELECT MAX(CANTIDAD_AMIGOS_CONFIRMADOS) --4
    FROM AMIGOS_CONFIRMADOS
);

-- 6. Mostrar el usuario con más solicitudes rechazadas (Forever alone).
SELECT * FROM TBL_ESTATUS_SOLICITUDES;

WITH AMIGOS_RECHAZADOS AS (
    SELECT A.CODIGO_USUARIO, B.NOMBRE_USUARIO, COUNT(*) CANTIDAD_AMIGOS_RECHAZADOS 
    FROM TBL_AMIGOS A
    INNER JOIN TBL_USUARIOS B
    ON (A.CODIGO_USUARIO = B.CODIGO_USUARIO)
    WHERE A.CODIGO_ESTATUS = 2
    GROUP BY A.CODIGO_USUARIO, B.NOMBRE_USUARIO
)
SELECT * 
FROM AMIGOS_RECHAZADOS
WHERE CANTIDAD_AMIGOS_RECHAZADOS = (
    SELECT MAX(CANTIDAD_AMIGOS_RECHAZADOS) --4
    FROM AMIGOS_RECHAZADOS
);

-- 7. Mostrar la cantidad de usuarios registrados mensualmente.
SELECT  TO_CHAR(A.FECHA_REGISTRO, 'YYYY-Month') MES, 
        COUNT(*) CANTIDAD_USUARIOS
FROM TBL_USUARIOS A
GROUP BY TO_CHAR(A.FECHA_REGISTRO, 'YYYY-Month')
ORDER BY 1;


-- TO_DATE
-- TO_CHAR

-- 8. Mostrar la edad promedio de los usuarios por género.
SELECT GENERO_USUARIO, ROUND(AVG(EDAD)) AS EDAD_PROMEDIO
FROM TBL_USUARIOS
GROUP BY GENERO_USUARIO;

-- 9. Con respecto al historial de accesos se necesita saber el crecimiento de los 
-- accesos del día 19 de
-- agosto del 2015 con respecto al día anterior, 
-- la fórmula para calcular dicho crecimiento se
-- muestra a continuación:
-- ((b-a)/a) * 100
-- Donde:
-- a = Cantidad de accesos del día anterior (18 de Agosto del 2015)
-- b = Cantidad de accesos del día actual (19 de Agosto del 2015)
-- Mostrar el resultado como un porcentaje (Concatenar %)

SELECT COUNT(*)
FROM TBL_HISTORIAL_ACCESOS
WHERE FECHA_HORA_ACCESO = TO_DATE('19-08-2015', 'DD-MM-YYYY'); --- 6

SELECT COUNT(*)
FROM TBL_HISTORIAL_ACCESOS
WHERE FECHA_HORA_ACCESO = TO_DATE('18-08-2015', 'DD-MM-YYYY'); -- 2


SELECT (
            (
                (   SELECT COUNT(*)
                    FROM TBL_HISTORIAL_ACCESOS
                    WHERE FECHA_HORA_ACCESO = TO_DATE('19-08-2015', 'DD-MM-YYYY')
                )- (SELECT COUNT(*)
                    FROM TBL_HISTORIAL_ACCESOS
                    WHERE FECHA_HORA_ACCESO = TO_DATE('18-08-2015', 'DD-MM-YYYY')
                )
            )
            / (
                SELECT COUNT(*)
                FROM TBL_HISTORIAL_ACCESOS
                WHERE FECHA_HORA_ACCESO = TO_DATE('18-08-2015', 'DD-MM-YYYY')
            )
        ) * 100 || '%' AS CRECIMIENTO
FROM DUAL;


WITH B AS (
    SELECT COUNT(*) AS ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE FECHA_HORA_ACCESO = TO_DATE('19-08-2015', 'DD-MM-YYYY')
),
A AS (
    SELECT COUNT(*) AS ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE FECHA_HORA_ACCESO = TO_DATE('18-08-2015', 'DD-MM-YYYY')
)
SELECT ((B.ACCESOS - A.ACCESOS) / A.ACCESOS) * 100 || '%' AS CRECIMIENTO
FROM A, B; -- PRODUCTO CARTESIANO

-- 10. Crear una consulta que muestre lo siguiente:
-- • Nombre del usuario.
-- • País donde pertenece.
-- • Cantidad de publicaciones que tiene.
-- • Cantidad de amigos confirmados.
-- • Cantidad de likes que ha dado.
-- • Cantidad de fotos en las que ha sido etiquetado.
-- • Cantidad de accesos en el historial.


-- OJO ESTA CONSULTA ESTA INCORRECTA PORQUE DUPLICA EL CONTEO DE REGISTROS
SELECT A.NOMBRE_USUARIO,
        B.NOMBRE_PAIS,
        -- C.CODIGO_PUBLICACION,
        -- D.CODIGO_AMIGO
        COUNT(DISTINCT C.CODIGO_PUBLICACION) AS CANTIDAD_PUBLICACIONES,
        COUNT(DISTINCT D.CODIGO_AMIGO) AS CANTIDAD_AMIGOS_CONFIRMADOS
FROM TBL_USUARIOS A
INNER JOIN TBL_PAISES B 
ON (A.CODIGO_PAIS = B.CODIGO_PAIS)
LEFT JOIN TBL_PUBLICACIONES C
ON (A.CODIGO_USUARIO = C.CODIGO_USUARIO)
LEFT JOIN TBL_AMIGOS D
ON (A.CODIGO_USUARIO = D.CODIGO_USUARIO)
WHERE D.CODIGO_ESTATUS = 1
GROUP BY A.NOMBRE_USUARIO, B.NOMBRE_PAIS
ORDER BY 1;

CREATE MATERIALIZED VIEW MVW_USUARIOS AS
WITH PUBLICACIONES AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_PUBLICACIONES 
    FROM TBL_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
AMIGOS_CONFIRMADOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
),
LIKES_PUBLICACIONES AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_LIKES
    FROM TBL_LIKE_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
LIKES_FOTOGRAFIAS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_LIKES
    FROM TBL_LIKE_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ETIQUETAS_FOTOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ETIQUETAS
    FROM TBL_ETIQUETA_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
HISTORIAL_ACCESOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_ACCESOS 
    FROM TBL_HISTORIAL_ACCESOS
    GROUP BY CODIGO_USUARIO
)
SELECT  A.CODIGO_USUARIO, 
        A.NOMBRE_USUARIO,
        B.NOMBRE_PAIS,
        NVL(C.CANTIDAD_PUBLICACIONES, 0) AS CANTIDAD_PUBLICACIONES,
        NVL(D.CANTIDAD_AMIGOS_CONFIRMADOS, 0) AS CANTIDAD_AMIGOS_CONFIRMADOS,
        NVL(E.CANTIDAD_LIKES, 0) + NVL(F.CANTIDAD_LIKES, 0) AS CANTIDAD_LIKES,
        NVL(G.CANTIDAD_ETIQUETAS, 0) AS CANTIDAD_ETIQUETAS,
        NVL(H.CANTIDAD_ACCESOS, 0) AS CANTIDAD_ACCESOS
FROM TBL_USUARIOS A
INNER JOIN TBL_PAISES B 
ON (A.CODIGO_PAIS = B.CODIGO_PAIS)
LEFT JOIN PUBLICACIONES C
ON (A.CODIGO_USUARIO = C.CODIGO_USUARIO)
LEFT JOIN AMIGOS_CONFIRMADOS D
ON (A.CODIGO_USUARIO = D.CODIGO_USUARIO)
LEFT JOIN LIKES_PUBLICACIONES E
ON (A.CODIGO_USUARIO = E.CODIGO_USUARIO)
LEFT JOIN LIKES_FOTOGRAFIAS F
ON (A.CODIGO_USUARIO = F.CODIGO_USUARIO)
LEFT JOIN ETIQUETAS_FOTOS G
ON (A.CODIGO_USUARIO = G.CODIGO_USUARIO)
LEFT JOIN HISTORIAL_ACCESOS H
ON (A.CODIGO_USUARIO = H.CODIGO_USUARIO)
ORDER BY 1;


SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_PUBLICACIONES 
FROM TBL_PUBLICACIONES
GROUP BY CODIGO_USUARIO;


SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_AMIGOS_CONFIRMADOS
FROM TBL_AMIGOS
WHERE CODIGO_ESTATUS = 1
GROUP BY CODIGO_USUARIO;

-- CANTIDAD DE LIKES
SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_LIKES
FROM TBL_LIKE_PUBLICACIONES
GROUP BY CODIGO_USUARIO;

SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_LIKES
FROM TBL_LIKE_FOTOGRAFIAS
GROUP BY CODIGO_USUARIO;

--CANTIDAD ETIQUETAS FOTOS
SELECT CODIGO_USUARIO, COUNT(*) CANTIDAD_ETIQUETAS
FROM TBL_ETIQUETA_FOTOGRAFIAS
GROUP BY CODIGO_USUARIO;

--CANTIDAD DE ACCESOS EN EL HISTORIAL
SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_ACCESOS 
FROM TBL_HISTORIAL_ACCESOS
GROUP BY CODIGO_USUARIO;


--11. De la consulta anterior cree una vista materializada y utilícela desde una 
-- tabla dinámica en Excel
--para mostrar una gráfica de línea que muestre la cantidad de amigos por cada usuario.


select * from MVW_USUARIOS;